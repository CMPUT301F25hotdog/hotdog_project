package com.hotdog.elotto.model;

import com.google.firebase.firestore.DocumentId;
import java.util.Date;
import java.util.List;

/**
 * Represents an event in the lottery registration system.
 *
 * <p>This class serves as the core data model for events created by organizers.
 * Events contain all necessary information including name, location, dates, capacity limits,
 * and lists tracking entrants through various stages (waiting list, selected, accepted, cancelled).
 *
 * <p>The Event class integrates with Firebase Firestore for data persistence and uses
 * the @DocumentId annotation to automatically map Firestore document IDs to the id field.
 *
 * <p>Model layer.
 *
 * <p><b>Design Pattern:</b> This class follows the JavaBean pattern with private fields,
 * public getters/setters, and a no-argument constructor required for Firebase serialization.
 *
 * <p><b>Outstanding Issues:</b>
 * - None currently
 *
 * @author Ethan Carter
 * @version 1.0
 * @since 2025-10-27
 */
public class Event {

    @DocumentId
    private String id;                      // Unique event ID (Firebase generated)

    // Basic Event Information
    private String name;
    private String description;
    private String location;
    private Date eventDateTime;

    // Registration Information
    private Date registrationStartDate;
    private Date registrationEndDate;

    // Capacity and Limits
    private int maxEntrants;
    private Integer waitlistLimit;

    // Organizer Information
    private String organizerId;
    private String organizerName;

    // Event Status
    private String status;

    // Optional Fields
    private String posterImageUrl;
    private double price;

    // Geolocation
    private boolean geolocationRequired;

    // QR Code
    private String qrCodeData;

    // Lists (stored as references in Firebase, not full objects)
    private List<String> waitlistEntrantIds;    // List of entrant IDs on waiting list
    private List<String> selectedEntrantIds;    // List of entrant IDs selected in lottery
    private List<String> acceptedEntrantIds;    // List of entrant IDs who accepted
    private List<String> cancelledEntrantIds;   // List of entrant IDs who cancelled/declined

    // Timestamps
    private Date createdAt;
    private Date updatedAt;

    /**
     * Default no-argument constructor required for Firebase Firestore serialization.
     * Firebase uses this constructor along with setter methods to populate object fields
     * when reading data from the database.
     */
    public Event() {
    }

    /**
     * Constructs a new Event with essential fields.
     * Sets default values for status (OPEN), geolocation (false), price (0.0),
     * and initializes timestamps.
     *
     * @param name the name of the event
     * @param description a detailed description of the event
     * @param location the physical location where the event takes place
     * @param eventDateTime the date and time when the event occurs
     * @param registrationStartDate when registration period begins
     * @param registrationEndDate when registration period ends
     * @param maxEntrants maximum number of attendees allowed
     * @param organizerId the unique ID of the organizer creating this event
     */
    public Event(String name, String description, String location, Date eventDateTime,
                 Date registrationStartDate, Date registrationEndDate,
                 int maxEntrants, String organizerId) {
        this.name = name;
        this.description = description;
        this.location = location;
        this.eventDateTime = eventDateTime;
        this.registrationStartDate = registrationStartDate;
        this.registrationEndDate = registrationEndDate;
        this.maxEntrants = maxEntrants;
        this.organizerId = organizerId;
        this.status = "OPEN";
        this.geolocationRequired = false;
        this.price = 0.0;
        this.createdAt = new Date();
        this.updatedAt = new Date();
    }

    // Getters and Setters with Javadoc

    /**
     * Gets the unique identifier for this event.
     * This ID is automatically generated by Firebase Firestore.
     *
     * @return the event ID, or null if not yet saved to Firebase
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the unique identifier for this event.
     * Typically called automatically by Firebase using the @DocumentId annotation.
     *
     * @param id the unique event identifier
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Gets the name of the event.
     *
     * @return the event name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the event.
     *
     * @param name the event name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the description of the event.
     *
     * @return the event description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the detailed description of the event.
     *
     * @param description the event description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the location where the event takes place.
     *
     * @return the event location
     */
    public String getLocation() {
        return location;
    }

    /**
     * Sets the location where the event takes place.
     *
     * @param location the event location
     */
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Gets the date and time when the event occurs.
     *
     * @return the event date and time
     */
    public Date getEventDateTime() {
        return eventDateTime;
    }

    /**
     * Sets the date and time when the event occurs.
     *
     * @param eventDateTime the event date and time
     */
    public void setEventDateTime(Date eventDateTime) {
        this.eventDateTime = eventDateTime;
    }

    /**
     * Gets the date when registration period begins.
     *
     * @return the registration start date
     */
    public Date getRegistrationStartDate() {
        return registrationStartDate;
    }

    /**
     * Sets the date when registration period begins.
     *
     * @param registrationStartDate the registration start date
     */
    public void setRegistrationStartDate(Date registrationStartDate) {
        this.registrationStartDate = registrationStartDate;
    }

    /**
     * Gets the date when registration period ends.
     *
     * @return the registration end date
     */
    public Date getRegistrationEndDate() {
        return registrationEndDate;
    }

    /**
     * Sets the date when registration period ends.
     *
     * @param registrationEndDate the registration end date
     */
    public void setRegistrationEndDate(Date registrationEndDate) {
        this.registrationEndDate = registrationEndDate;
    }

    /**
     * Gets the maximum number of attendees allowed for this event.
     *
     * @return the maximum capacity
     */
    public int getMaxEntrants() {
        return maxEntrants;
    }

    /**
     * Sets the maximum number of attendees allowed for this event.
     *
     * @param maxEntrants the maximum capacity
     */
    public void setMaxEntrants(int maxEntrants) {
        this.maxEntrants = maxEntrants;
    }

    /**
     * Gets the optional limit on waiting list size.
     *
     * @return the waitlist limit, or null if no limit
     */
    public Integer getWaitlistLimit() {
        return waitlistLimit;
    }

    /**
     * Sets an optional limit on waiting list size.
     *
     * @param waitlistLimit the maximum waiting list size, or null for unlimited
     */
    public void setWaitlistLimit(Integer waitlistLimit) {
        this.waitlistLimit = waitlistLimit;
    }

    /**
     * Gets the unique ID of the organizer who created this event.
     *
     * @return the organizer's ID
     */
    public String getOrganizerId() {
        return organizerId;
    }

    /**
     * Sets the unique ID of the organizer who created this event.
     *
     * @param organizerId the organizer's ID
     */
    public void setOrganizerId(String organizerId) {
        this.organizerId = organizerId;
    }

    /**
     * Gets the name of the organizer.
     *
     * @return the organizer's name
     */
    public String getOrganizerName() {
        return organizerName;
    }

    /**
     * Sets the name of the organizer.
     *
     * @param organizerName the organizer's name
     */
    public void setOrganizerName(String organizerName) {
        this.organizerName = organizerName;
    }

    /**
     * Gets the current status of the event.
     * Valid values: "OPEN", "CLOSED", "FULL", "COMPLETED"
     *
     * @return the event status
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the current status of the event.
     *
     * @param status the event status (e.g., "OPEN", "CLOSED", "FULL", "COMPLETED")
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Gets the URL to the event's poster image stored in Firebase Storage.
     *
     * @return the poster image URL, or null if no poster uploaded
     */
    public String getPosterImageUrl() {
        return posterImageUrl;
    }

    /**
     * Sets the URL to the event's poster image.
     *
     * @param posterImageUrl the Firebase Storage URL for the poster image
     */
    public void setPosterImageUrl(String posterImageUrl) {
        this.posterImageUrl = posterImageUrl;
    }

    /**
     * Gets the price to attend the event.
     *
     * @return the event price (0.0 for free events)
     */
    public double getPrice() {
        return price;
    }

    /**
     * Sets the price to attend the event.
     *
     * @param price the event price (use 0.0 for free events)
     */
    public void setPrice(double price) {
        this.price = price;
    }

    /**
     * Checks if geolocation verification is required to join the waiting list.
     *
     * @return true if geolocation is required, false otherwise
     */
    public boolean isGeolocationRequired() {
        return geolocationRequired;
    }

    /**
     * Sets whether geolocation verification is required to join the waiting list.
     *
     * @param geolocationRequired true to require geolocation, false otherwise
     */
    public void setGeolocationRequired(boolean geolocationRequired) {
        this.geolocationRequired = geolocationRequired;
    }

    /**
     * Gets the QR code data associated with this event.
     *
     * @return the QR code data string
     */
    public String getQrCodeData() {
        return qrCodeData;
    }

    /**
     * Sets the QR code data for this event.
     *
     * @param qrCodeData the QR code data string
     */
    public void setQrCodeData(String qrCodeData) {
        this.qrCodeData = qrCodeData;
    }

    /**
     * Gets the list of entrant IDs currently on the waiting list.
     *
     * @return list of entrant IDs, or null if no entrants
     */
    public List<String> getWaitlistEntrantIds() {
        return waitlistEntrantIds;
    }

    /**
     * Sets the list of entrant IDs on the waiting list.
     *
     * @param waitlistEntrantIds list of entrant IDs
     */
    public void setWaitlistEntrantIds(List<String> waitlistEntrantIds) {
        this.waitlistEntrantIds = waitlistEntrantIds;
    }

    /**
     * Gets the list of entrant IDs selected in the lottery draw.
     *
     * @return list of selected entrant IDs, or null if lottery not yet run
     */
    public List<String> getSelectedEntrantIds() {
        return selectedEntrantIds;
    }

    /**
     * Sets the list of entrant IDs selected in the lottery.
     *
     * @param selectedEntrantIds list of selected entrant IDs
     */
    public void setSelectedEntrantIds(List<String> selectedEntrantIds) {
        this.selectedEntrantIds = selectedEntrantIds;
    }

    /**
     * Gets the list of entrant IDs who accepted their invitation.
     *
     * @return list of accepted entrant IDs, or null if none accepted
     */
    public List<String> getAcceptedEntrantIds() {
        return acceptedEntrantIds;
    }

    /**
     * Sets the list of entrant IDs who accepted their invitation.
     *
     * @param acceptedEntrantIds list of accepted entrant IDs
     */
    public void setAcceptedEntrantIds(List<String> acceptedEntrantIds) {
        this.acceptedEntrantIds = acceptedEntrantIds;
    }

    /**
     * Gets the list of entrant IDs who cancelled or declined their invitation.
     *
     * @return list of cancelled entrant IDs, or null if none cancelled
     */
    public List<String> getCancelledEntrantIds() {
        return cancelledEntrantIds;
    }

    /**
     * Sets the list of entrant IDs who cancelled or declined.
     *
     * @param cancelledEntrantIds list of cancelled entrant IDs
     */
    public void setCancelledEntrantIds(List<String> cancelledEntrantIds) {
        this.cancelledEntrantIds = cancelledEntrantIds;
    }

    /**
     * Gets the timestamp when this event was created.
     *
     * @return the creation date
     */
    public Date getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets the timestamp when this event was created.
     *
     * @param createdAt the creation date
     */
    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets the timestamp of the last update to this event.
     *
     * @return the last update date
     */
    public Date getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Sets the timestamp of the last update.
     *
     * @param updatedAt the last update date
     */
    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }



    // More Methods

    /**
     * Checks if registration is currently open for this event.
     * Registration is open if the current time is between registrationStartDate
     * and registrationEndDate.
     *
     * @return true if registration is currently open, false otherwise
     */
    public boolean isRegistrationOpen() {
        Date now = new Date();
        return now.after(registrationStartDate) && now.before(registrationEndDate);
    }

    /**
     * Checks if the waiting list has reached its capacity limit.
     *
     * @return true if waiting list is full, false if there's space or no limit set
     */
    public boolean isFull() {
        if (waitlistLimit != null && waitlistEntrantIds != null) {
            return waitlistEntrantIds.size() >= waitlistLimit;
        }
        return false;
    }

    /**
     * Gets the current number of entrants on the waiting list.
     *
     * @return the number of entrants on waiting list, or 0 if list is empty
     */
    public int getCurrentWaitlistCount() {
        if (waitlistEntrantIds != null) {
            return waitlistEntrantIds.size();
        } else {
            return 0;
        }
    }

    /**
     * Gets the current number of entrants who have accepted their invitation.
     *
     * @return the number of accepted entrants, or 0 if none have accepted
     */
    public int getCurrentAcceptedCount() {
        if (acceptedEntrantIds != null) {
            return acceptedEntrantIds.size();
        } else {
            return 0;
        }
    }

    /**
     * Calculates the number of available spots remaining.
     * This is the difference between maxEntrants and currently accepted entrants.
     *
     * @return the number of spots remaining
     */
    public int getSpotsRemaining() {
        return maxEntrants - getCurrentAcceptedCount();
    }

    /**
     * Returns a string representation of this Event object.
     * Useful for debugging and logging purposes.
     *
     * @return a string containing key event information
     */
    @Override
    public String toString() {
        return "Event{" +
                "id='" + id + '\'' +
                ", name='" + name + '\'' +
                ", location='" + location + '\'' +
                ", eventDateTime=" + eventDateTime +
                ", status='" + status + '\'' +
                '}';
    }
}